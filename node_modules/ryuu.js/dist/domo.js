/*! For license information please see domo.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.domo=t():e.domo=t()}(self,(function(){return(()=>{"use strict";var e={727:(e,t,r)=>{var o=r(554),n=r(206),a=function(){function e(){}return e.post=function(e,t,r){return i(o.RequestMethods.POST,e,r,!0,t)},e.put=function(e,t,r){return i(o.RequestMethods.PUT,e,r,!0,t)},e.get=function(e,t){return i(o.RequestMethods.GET,e,t)},e.delete=function(e,t){return i(o.RequestMethods.DELETE,e,t)},e.getAll=function(t,r){return Promise.all(t.map((function(t){return e.get(t,r)})))},e.onDataUpdate=function(e){function t(t){if(c(t.origin)&&"string"==typeof t.data&&t.data.length>0)try{var r=JSON.parse(t.data);if(!r.hasOwnProperty("alias"))return;var o=r.alias,n=JSON.stringify({event:"ack",alias:o});t.source instanceof MessagePort||t.source instanceof ServiceWorker||t.source.postMessage(n,t.origin),e(o)}catch(e){console.warn("There was an error in onDataUpdate! It may be that our event listener caught a message from another source and tried to parse it, so your update still may have worked. If you would like more info, here is the error: \n",e)}}return window.addEventListener("message",t),function(){return window.removeEventListener("message",t)}},e.navigate=function(e,t){var r=JSON.stringify({event:"navigate",url:e,isNewWindow:t});window.parent.postMessage(r,"*")},e.filterContainer=function(e){var t=window.navigator.userAgent.toLowerCase(),r=/safari/.test(t),o=/iphone|ipod|ipad/.test(t),n=JSON.stringify({event:"filter",filter:e&&e.map((function(e){return{columnName:e.column,operator:e.operator||e.operand,values:e.values,dataType:e.dataType}}))});o&&!r?window.webkit.messageHandlers.domofilter.postMessage(e&&e.map((function(e){return{column:e.column,operand:e.operator||e.operand,values:e.values,dataType:e.dataType}}))):window.parent.postMessage(n,"*")},e.connected=!1,e.listeners={onFiltersUpdate:[]},e.connect=function(){e.connected||(e.connected=!0,e.channel=new MessageChannel,window.parent.postMessage(JSON.stringify({event:"subscribe"}),"*",[e.channel.port2]))},e.onFiltersUpdate=function(t){e.connect();var r=e.listeners.onFiltersUpdate.push(t)-1;return e.channel.port1.onmessage=function(t){var r=t.ports[0];void 0!==r&&"filtersUpdated"===t.data.event&&e.listeners.onFiltersUpdate.length>0&&(r.postMessage({}),e.listeners.onFiltersUpdate.forEach((function(e){return e(t.data.filters)})))},function(){e.listeners.onFiltersUpdate.splice(r,1)}},e.env=d(),e.__util={isVerifiedOrigin:c,getQueryParams:d,setFormatHeaders:p,isSuccess:u},e}(),s=window.__RYUU_SID__;function i(e,t,r,n,a){return r=r||{},new Promise((function(i,c){var d=new XMLHttpRequest;if(n?d.open(e,t,n):d.open(e,t),p(d,t,r),function(e,t){t.contentType?"multipart"!==t.contentType&&e.setRequestHeader("Content-Type",t.contentType):e.setRequestHeader("Content-Type",o.DataFormats.JSON)}(d,r),function(e){s&&e.setRequestHeader("X-DOMO-Ryuu-Session",s)}(d),function(e,t){void 0!==t.responseType&&(e.responseType=t.responseType)}(d,r),d.onload=function(){var e;if(u(d.status)){!["csv","excel"].includes(r.format)&&d.response||i(d.response),"blob"===r.responseType&&i(new Blob([d.response],{type:d.getResponseHeader("content-type")}));var t=d.response;try{e=JSON.parse(t)}catch(e){return void c(Error("Invalid JSON response"))}i(e)}else c(Error(d.statusText))},d.onerror=function(){c(Error("Network Error"))},a)if(r.contentType&&r.contentType!==o.DataFormats.JSON)d.send(a);else{var f=JSON.stringify(a);d.send(f)}else d.send()}))}function u(e){return e>=200&&e<300}function c(e){var t=e.match("^https?://([^/]+[.])?(domo|domotech|domorig).(com|io)?(/.*)?$"),r=e.match("(.*).(domoapps).(.*)");return!!t&&!r}function d(){var e=location.search.substr(1),t={};return e.split("&").forEach((function(e){var r=e.split("=");t[r[0]]=decodeURIComponent(r[1])})),t}function p(e,t,r){if(-1!==t.indexOf("data/v")){var a=void 0!==r.format?(0,n.domoFormatToRequestFormat)(r.format):o.DataFormats.DEFAULT;e.setRequestHeader("Accept",a)}}function f(e){if(e===document.body||e===document.head)return l(e);var t=e.dataset&&e.dataset.domoHref||e.getAttribute("href"),r=e.dataset&&e.dataset.domoSrc||e.getAttribute("src"),o=t?"href":"src",n=t||r;if(n&&s&&!n.includes(s)){var a=new URL(n,document.location.origin);a.origin===document.location.origin&&(a.searchParams.append("ryuu-sid",s),e.setAttribute(o,a.href))}}function l(e){for(var t=0;t<e.children.length;t++)f(e.children[t])}var m=new MutationObserver((function(e){for(var t=0,r=e;t<r.length;t++)l(r[t].target)}));m.observe(document.body,{childList:!0,subtree:!0}),m.observe(document.head,{childList:!0,subtree:!0}),e.exports=a},548:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DataFormats=void 0,(r=t.DataFormats||(t.DataFormats={})).DEFAULT="application/array-of-objects",r.ARRAY_OF_OBJECTS="application/array-of-objects",r.JSON="application/json",r.CSV="text/csv",r.EXCEL="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",r.PLAIN="text/plain"},64:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.RequestMethods=void 0,(r=t.RequestMethods||(t.RequestMethods={})).get="GET",r.GET="GET",r.post="POST",r.POST="POST",r.put="PUT",r.PUT="PUT",r.delete="DELETE",r.DELETE="DELETE"},554:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FilterDataTypes=t.DataFormats=t.RequestMethods=void 0;var o=r(64);Object.defineProperty(t,"RequestMethods",{enumerable:!0,get:function(){return o.RequestMethods}});var n=r(548);Object.defineProperty(t,"DataFormats",{enumerable:!0,get:function(){return n.DataFormats}});var a=r(616);Object.defineProperty(t,"FilterDataTypes",{enumerable:!0,get:function(){return a.FilterDataTypes}})},616:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.FilterDataTypes=void 0,(r=t.FilterDataTypes||(t.FilterDataTypes={})).NUMERIC="NUMERIC",r.DATE="DATE",r.DATETIME="DATETIME",r.STRING="STRING"},206:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.domoFormatToRequestFormat=void 0;var o=r(554);t.domoFormatToRequestFormat=function(e){switch(e){case"array-of-objects":return o.DataFormats.ARRAY_OF_OBJECTS;case"array-of-arrays":return o.DataFormats.JSON;case"excel":return o.DataFormats.EXCEL;case"csv":return o.DataFormats.CSV;default:return o.DataFormats.DEFAULT}}}},t={};return function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,r),a.exports}(727)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,